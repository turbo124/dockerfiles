# Stage 1: Build the application
FROM debian:bookworm-slim as base

LABEL maintainer="David Bomba <turbo124@gmail.com>"

WORKDIR /app

# Fetch and extract Invoice Ninja
ARG INVOICENINJA_VERSION

RUN apt-get update && apt-get install -y curl unzip

RUN curl -L https://github.com/invoiceninja/invoiceninja/releases/download/v${INVOICENINJA_VERSION}/react-invoiceninja.tar -o /tmp/ninja.tar 

# Extract Invoice Ninja
RUN mkdir -p /var/www/app \
    && tar -xvf /tmp/ninja.tar -C /var/www/app \
    && mkdir -p /var/www/app/public/logo /var/www/app/storage \
    && mkdir -p /var/www/storage/logs \
    && mkdir -p /var/www/storage/framework \
    && mkdir -p /var/www/storage/cache \
    && mkdir -p /var/www/bootstrap/cache

ARG PHP_VERSION=8.2

# Install PHP and other dependencies
RUN apt-get update && apt-get install -y \
    php${PHP_VERSION} \
    php${PHP_VERSION}-fpm \
    php${PHP_VERSION}-gd \
    php${PHP_VERSION}-bcmath \
    php${PHP_VERSION}-ctype \
    php${PHP_VERSION}-mbstring \
    php${PHP_VERSION}-common \
    php${PHP_VERSION}-tokenizer \
    php${PHP_VERSION}-xml \
    php${PHP_VERSION}-curl \
    php${PHP_VERSION}-zip \
    php${PHP_VERSION}-gmp \
    php${PHP_VERSION}-iconv \
    php${PHP_VERSION}-mysqli \
    php${PHP_VERSION}-soap \
    php${PHP_VERSION}-imagick \
    php${PHP_VERSION}-opcache \
    nginx \
    supervisor \
    curl \
    bash \
    git \
    cron \
    libpng-dev \
    libjpeg-dev \
    libfreetype6-dev \
    libmagickwand-dev \
    libxml2-dev \
    libzip-dev \
    libonig-dev \
    libgmp-dev \
    ca-certificates \
    fonts-liberation \
    libappindicator3-1 \
    libasound2 \
    libatk-bridge2.0-0 \
    libatk1.0-0 \
    libc6 \
    libcairo2 \
    libcups2 \
    libdbus-1-3 \
    libexpat1 \
    libfontconfig1 \
    libgbm1 \
    libgcc1 \
    libglib2.0-0 \
    libgtk-3-0 \
    libnspr4 \
    libnss3 \
    libpango-1.0-0 \
    libpangocairo-1.0-0 \
    libstdc++6 \
    libx11-6 \
    libx11-xcb1 \
    libxcb1 \
    libxcomposite1 \
    libxcursor1 \
    libxdamage1 \
    libxext6 \
    libxfixes3 \
    libxi6 \
    libxrandr2 \
    libxrender1 \
    libxss1 \
    libxtst6 \
    lsb-release \
    wget \
    xdg-utils \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Copy Nginx configuration file
COPY config/nginx/default.conf /etc/nginx/sites-available/default

# Configure Cron
RUN echo "* * * * * www-data cd /var/www/app && php artisan schedule:run >> /dev/null 2>&1" >> /etc/crontab

# Enable Nginx site
RUN rm -f /etc/nginx/sites-enabled/default \
    && ln -s /etc/nginx/sites-available/default /etc/nginx/sites-enabled/default

# Copy Supervisor configuration file
COPY config/supervisor/supervisord.conf /etc/supervisor/supervisord.conf

# Copy index file
RUN cp /var/www/app/ui/dist/index.html /var/www/app/resources/views/react/index.blade.php

# Set working directory
WORKDIR /var/www

# Change current user to www-data
RUN chown -R www-data:www-data /var/www

# Expose port 80
EXPOSE 80
WORKDIR /var/www/app

COPY config/entrypoint/entrypoint.sh /usr/local/bin/entrypoint.sh
# Set the entrypoint script as executable
RUN chmod +x /usr/local/bin/entrypoint.sh

# Set the entrypoint command
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]

# Start Supervisor to manage Nginx and PHP-FPM
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/supervisord.conf"]
